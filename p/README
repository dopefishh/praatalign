MAUS Parameter Set

See also the file USAGE in the top directory of the package.

This is a language independent parameter set of MAUS that allows 
the segmentation of arbitrary languages just using standard SAM-PA 
transcriptions as input (KAN tier in the input BPF).
All SAM-PA symbols as defined by wikispeech (and some more) can be
used in the input. For
technical reasons we cannot use SAMPA symbols with an appended 
backslash, e.g. 'r\'. The SAMPA symbols that are supported
in this set are defined in SAMPA.inv and SAMPA.dia, 1st column. 
This base list (SAMPA.inv) is extended by symbols that were used in different languages 
for one reason or another, e.g. geminates ('tt'), affricates ('pf'), geminated affricates
('ttS'), diphthongs ('ua') or sub-segments (closure + release) for plosives ('t_cl,t_rl').
Because of the large number of diphthong and other combinations
this MAUS mode requires that the SAM-PA transcript in the BPF 
KAN tier is already blank-separated, that is instead of 
'hOYt@ Ist S2:n@s' you must use 'h OY t @ I s t S 2: n @ s' in the KAN tier.

Sub-segments (closure, release) of plosives are coded by appended
'cl' and 'rl' respectively (e.g. 't_cl', t_rl'). Diphthongs
are coded by concatenating the corresponding symbols
(e.g. 'Ua'). Triphthongs are code by using the first two phonemes
as diphthong and the third as a separate phoneme, e.g. 'OY 6'.

The following diacritics are partly supported by MAUS; check the 
table SAMPA.dia for existing symbol-diacritics combinations (if you 
require a certain new combination, please follow the normal procedure 
to add a new symbol to this set below, see 'Virtual Symbols'):
lengthening of vowels/diphthongs: <symbol>:  e.g.  'a:'
geminasation:                     <symbol><symbol>  e.g.  'tt' 'ddZ'
nasalisation of vowels:           <symbol>~  e.g.  'o~'
palatalisation:                   <symbol>_j  e.g.  't_j'
aspiration:                       <symbol>_h  e.g.  'p_h'
Combination of diacritics must be ordered like the list above, e.g.
'a:~' is allowed, 'a~:' is not.

KANINVENTAR : list of all phonemic symbols (denoted as 'symbols'
	henceforth) that are recognized in the input of MAUS.
	Symbols must be ordered in reversed string length (/aI/
	before /a/ etc.)
	The script kan2mlf will map these to the symbol set in 
	GRAPHINVENTAR and script rec2mau will map them back
KANINVENTAR.inv : extended version of KANINVENTAR used for reference:
	MAUS:		SAMPA symbols as supported by MAUS (KAN tier input)
	SAMPA:		Original SAMPA symbol
	IPA:		IPA symbol (if applicable, coded UTF-8)
	PHONETICS:	phonetic description (if applicable)
	EXAMPLES:	orthographic examples (if applicable)
	ISO639-3:	Iso 639-3 code of the SAMPA set
			'xxx' = used in multiple languages
	HMM:		name of the acoustic model that represents 
			the SAMPA symbol in MAUS:  <symbol>.<isocode>
			e.g. '@.deu' : schwa is modelled by the HMM
			trained on German data
GRAPHINVENTAR : list of all symbols as being used in the statistical 
        rule set; for instance numerical symbols must be preceeded 
	by a 'P' so that the rules work and the visualization program 
	graphvis works on the graph files.  This set may be a superset of the set of 
	symbols that actually occur in the rule set. But then the usage
	of an 'unknown' symbol might prevent the application of a rule.
	'Unknown' symbols are simply passed through by the program
	word_var-2.0 which builds the graph.
	For example:
	GRAPHINVENTAR contains the symbol /a~/ but the rule set knows only
	about /a/. Then the rule #,d,a>#,s,a will not applied to the input
	..,#,d,a~,... because the context does not match.
HMMINVENTAR : list of all symbols where MAUS has a HMM available.
        Again numerical symbols must be preceeded by a 'P'. For each symbol
	listed here there must be a corresponding HMM definition the file
	MMF.mmf.
	Also, the right hand side of the table DICT must not contain any 
	symbol that is not listed here.
DICT :  HTK-Lexikon, contains as 'words' the symbols of GRAPHINVENTAR and
        as 'pronunciation' the symbols of HMMINVENTAR.
MMF.mmf : points to the acoustical HMM models (must match HMMINVENTAR)
regeln*
rml*    : rule sets
rml-0.95.rul : points to the default used statistical rule set
PRECONFIGNIST : HTK config file for fontend processing (HCopy)
HVITECONF : HTK config file for Viterbi processing (HVite)

SAMPA.inv : offcially supported SAM-PA base symbols with additional information
SAMPA.dia : extensions of the base symbol set because of diphthongs, geminates, 
            diacritics and language specific requirements.
	    Both list have the columns:
	    MAUS:	SAMPA symbols as supported by MAUS (KAN tier input)
	    SAMPA:	Original SAMPA symbol
	    IPA:	IPA symbol (if applicable, coded UTF-8)
	    PHONETICS:	phonetic description (if applicable)
	    EXAMPLES:	orthographic examples (if applicable)
	    ISO639-3:	Iso 639-3 code of the SAMPA set
			'xxx' = used in multiple languages

SAMPA.map : the mapping of supported SAMPA symbol (1st column) to actual HMM
            (2nd column); the 2nd column must be a subset of SUPERHMM.lst 
	    and coded as in HMMINVENTAR

Virtual Symbols

If you want MAUS to segment symbols that are not contained in the 
acoustical model (that is they are not contained in MMF.mmf and not listed in 
HMMINVENTAR) but are very similar to an existing symbol, you may define them 
as 'virtual symbols' for MAUS (but see also 'Administration' below!). 
For example:
The HMM set does not contain nasalized vowels, but you want to process /E~/
You have to
- insert 'E~' into KANINVENTAR and GRAPHINVENTAR
- add a the following line to DICT:
  E~ E
This causes MAUS to pass through all /E~/ and use the acoustical model /E/ 
for it. Note that the application of rules where /E/ is in the context of the 
rule will not take place here!

Administration

The script mk_set creates the SAMPA set from scratch using SAMPA.inv, SAMPA.dia,
SAMPA.map and SUPERHMM.*:

New symbols required in SAMPA set (e.g. a new nasalized version of a phoneme). 
How to add?
1. Add the new symbol to SAMPA.dia and describe it accordingly
2. Add a mapping for the new symbol to an existing (SUPERHMM.lst) HMM to 
SAMPA.map
3. Run mk_set

New HMMs are trained for a language. How to propagate to SAMPA set?
1. Run HMM/aggregate to collect new HMMs into SUPERHMM (the language
must explicitely added to the aggregate script first!)
2. Edit SAMPA.map and replace bad mappings by new HMM names in 2nd colum
3. Run mk_set

A new language is defined in MAUS. How can I produce the KANINVENTAR.inv?
1. Define the KANINVENTAR for the new language <LANG> in PARAM.<LANG>
2. Check that all new SAMPA symbols of <LANG> are defined in SAMPA.inv or
SAMPA.dia.
3. Run mk_kaninventar_inv to create all KANINVENTAR.inv anew
